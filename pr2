import java.util.Scanner;

class Bank {
    private int balance = 0;

    // Deposit method
    public synchronized void deposit(int amount) {
        balance += amount;
        System.out.println("Deposited: " + amount);
        System.out.println("Current Balance: " + balance);
        notifyAll(); // notify waiting withdraw threads
    }

    // Withdraw method
    public synchronized void withdraw(int amount) {
        while (balance < amount) {
            System.out.println("Not enough balance! Waiting for deposit...");
            try {
                wait(); // wait until deposit happens
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        balance -= amount;
        System.out.println("Withdrawn: " + amount);
        System.out.println("Current Balance: " + balance);
    }
}

class DepositThread extends Thread {
    private Bank bank;
    private int amount;

    DepositThread(Bank bank, int amount) {
        this.bank = bank;
        this.amount = amount;
    }

    public void run() {
        bank.deposit(amount);
    }
}

class WithdrawThread extends Thread {
    private Bank bank;
    private int amount;

    WithdrawThread(Bank bank, int amount) {
        this.bank = bank;
        this.amount = amount;
    }

    public void run() {
        bank.withdraw(amount);
    }
}

public class Test {
    public static void main(String[] args) {
        Bank bank = new Bank();
        Scanner sc = new Scanner(System.in);
        int choice;

        while (true) {
            System.out.println("\n1. Deposit");
            System.out.println("2. Withdraw");
            System.out.println("0. Exit");
            System.out.print("Choose option: ");
            choice = sc.nextInt();

            if (choice == 0) {
                System.out.println("Exiting...");
                break;
            }

            switch (choice) {
                case 1:
                    System.out.print("Enter amount to deposit: ");
                    int dep = sc.nextInt();
                    new DepositThread(bank, dep).start();
                    break;

                case 2:
                    System.out.print("Enter amount to withdraw: ");
                    int with = sc.nextInt();
                    new WithdrawThread(bank, with).start();
                    break;

                default:
                    System.out.println("Invalid choice!");
            }
        }
        sc.close();
    }
}
